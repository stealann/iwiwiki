#!/usr/bin/env python

'''
iwiWiki - a wiki compiler
'''

import markdown
import re
import sys
import codecs
import string
import os
from datetime import datetime


template = '''<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <title>$title</title>
    </head>
    <body>
        $pathnav<hr />
        $body
        <hr />
        compile_time:$compile_time
    </body>
</html>
'''


class WikiLinks(markdown.inlinepatterns.Pattern):
    def __init__(self, pattern, markdown_instance = None):
        markdown.inlinepatterns.Pattern.__init__(self, pattern, markdown_instance)

    def handleMatch(self, m):
        label = m.group(2).strip()
        url = '%s.html' % label
        a = markdown.etree.Element('a')
        a.text = label
        a.set('href', url)
        a.set('class', 'wikilink')
        return a


class IwiWikiExtension(markdown.Extension):
    def __init__(self):
        pass

    def extendMarkdown(self, md, md_globals):
        self.md = md

        # append to end of inline patterns
        WIKILINK_RE = r'\[\[([^\]]+)\]\]'
        wikilinkPattern = WikiLinks(WIKILINK_RE, md)
        md.inlinePatterns.add('wikilink', wikilinkPattern, "<not_strong")


def create_pathnav(path):
    path = os.path.normpath(path)
    root = markdown.etree.Element('p')
    a = markdown.etree.Element('a')
    l = len(path.split(os.sep)) - 1
    a.text = 'Top'
    a.set('href', '../' * l + 'index.html')
    root.append(a)
    for i, p in enumerate(os.path.dirname(path).split(os.sep)):
        if p == '':
            break
        s = markdown.etree.Element('span')
        s.text = ' / '
        root.append(s)
        a = markdown.etree.Element('a')
        a.text = p
        a.set('href', '../' * (l - i) + p + '.html')
        root.append(a)
    s = markdown.etree.Element('span')
    s.text = ' / '
    root.append(s)
    s = markdown.etree.Element('span')
    s.text = os.path.splitext(os.path.basename(path))[0]
    root.append(s)
    return markdown.etree.tostring(root)


def main():
    iwi_ext = IwiWikiExtension()
    md = markdown.Markdown(extensions=['extra',iwi_ext])
    in_fn = sys.argv[1].decode('utf-8')
    title = os.path.splitext(os.path.basename(in_fn))[0]
    tm = string.Template(template)
    with codecs.open(in_fn, 'r', 'utf-8') as f:
        d = f.read()
        body = md.convert(d)
        s = tm.substitute({
            'body': body,
            'title': title,
            'pathnav': create_pathnav(in_fn),
            'compile_time': datetime.now().ctime(),
        })
    out = codecs.getwriter('utf-8')(sys.stdout)
    out.write(s)

if __name__ == "__main__":
    main()
